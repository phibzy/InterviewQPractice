!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BrowserHistory	Solutions/DesignBrowserHistory/browserHistory.py	/^class BrowserHistory:$/;"	c
CC	Solutions/HashTableImplementation/makefile	/^CC = clang$/;"	m
CFLAGS	Solutions/HashTableImplementation/makefile	/^CFLAGS = -Wall -Werror -Wextra -O$/;"	m
DFS	Solutions/NumberOfIslands/numberOfIslands.py	/^def DFS(grid, visited, x, y):$/;"	f
Graph	NotesForInterview/dfsbfscode/implementation.java	/^public class Graph {$/;"	c
Hash	Solutions/HashTableImplementation/hash.h	/^typedef struct _hash * Hash;$/;"	t	typeref:struct:_hash
LRUCache	Solutions/LRUCache/lrucache.py	/^class LRUCache:$/;"	c
ListNode	Solutions/AddTwoNumbersAlt/addTwo.py	/^class ListNode:$/;"	c
ListNode	Solutions/BinaryLListToInt/binToInt.py	/^class ListNode:$/;"	c
ListNode	Solutions/InsertionSortList/insertionSort.py	/^class ListNode:$/;"	c
ListNode	Solutions/ReverseNodesKGroup/reverseKGroup.py	/^class ListNode:$/;"	c
MyQueue	MockInterview/LC2/FIFO/FIFO.py	/^class MyQueue:$/;"	c
MyQueueAmortized	MockInterview/LC2/FIFO/FIFO.py	/^class MyQueueAmortized:$/;"	c
Node	MockInterview/LC2/FIFO/FIFO.py	/^class Node:$/;"	c
Node	NotesForInterview/dfsbfscode/implementation.java	/^      private Node(int id) {$/;"	m	class:Graph.Node	file:
Node	NotesForInterview/dfsbfscode/implementation.java	/^   public static class Node {$/;"	c	class:Graph
Node	Solutions/ArrayManipulation/arrayManip.py	/^class Node:$/;"	c
Node	Solutions/HashTableImplementation/hash.c	/^typedef struct _node * Node;$/;"	t	typeref:struct:_node	file:
Node	Solutions/NumNodesInSubtree/numNodesInSubtree.py	/^class Node:$/;"	c
Node	Solutions/PopulateNextRightPointer/popRight.py	/^class Node:$/;"	c
Player	Solutions/SortingComparator/sortingComparator.py	/^class Player:$/;"	c
Solution	MockInterview/LC1/longestPalindrome/longestPal.py	/^class Solution:$/;"	c
Solution	MockInterview/LC2/DayOfWeek/dayOfWeek.py	/^class Solution:$/;"	c
Solution	MockInterview/LC3/DeleteNodeNoHead/deleteNode.py	/^class Solution:$/;"	c
Solution	MockInterview/LC3/NumberOf1Bits/numberOf1Bits.py	/^class Solution:$/;"	c
Solution	Solutions/AToI/atoi.py	/^class Solution:$/;"	c
Solution	Solutions/AddBinary/addBinary.py	/^class Solution:$/;"	c
Solution	Solutions/AddTwoNumbersAlt/addTwo.py	/^class Solution:$/;"	c
Solution	Solutions/BTreeMaxPathSum/bTreeMaxPathSum.py	/^class Solution:$/;"	c
Solution	Solutions/BTreeTilt/BTreeTilt.py	/^class Solution:$/;"	c
Solution	Solutions/BTreeTilt/BTreeTilt2.py	/^class Solution:$/;"	c
Solution	Solutions/BalancedBTree/balancedBTree.py	/^class Solution:$/;"	c
Solution	Solutions/BinaryLListToInt/binToInt.py	/^class Solution:$/;"	c
Solution	Solutions/BuySellStockI/buySell.py	/^class Solution:$/;"	c
Solution	Solutions/ConsecutiveCharacters/conChar.py	/^class Solution:$/;"	c
Solution	Solutions/CourseSchedule/courseSchedule.py	/^class Solution:$/;"	c
Solution	Solutions/CycleInLlist/listCycle.py	/^class Solution:$/;"	c
Solution	Solutions/DecodeString/decodeString.py	/^class Solution:$/;"	c
Solution	Solutions/FirstLastPositionOfElement/flElement.py	/^class Solution:$/;"	c
Solution	Solutions/FirstUniqueChar/firstUniqueChar.py	/^class Solution:$/;"	c
Solution	Solutions/FlippingImage/flipImage.py	/^class Solution:$/;"	c
Solution	Solutions/InorderTraversal/inorderTraversal.py	/^class Solution:$/;"	c
Solution	Solutions/InsertionSortList/insertionSort.py	/^class Solution:$/;"	c
Solution	Solutions/LCAOfBST/LCA.py	/^class Solution:$/;"	c
Solution	Solutions/LongestMountainInArray/longestMountain.py	/^class Solution:$/;"	c
Solution	Solutions/MaxDiffAncestor/maxDiffAncestor.py	/^class Solution:$/;"	c
Solution	Solutions/MaxTreeDepth/maxTreeDepth.py	/^class Solution:$/;"	c
Solution	Solutions/MergeIntervals/mergeIntervals.py	/^class Solution:$/;"	c
Solution	Solutions/MergeTwoLists/mergeTwoLists.py	/^class Solution:$/;"	c
Solution	Solutions/MinCostToMoveChips/minCost.py	/^class Solution:$/;"	c
Solution	Solutions/MinHeightTrees/minHeight.py	/^class Solution:$/;"	c
Solution	Solutions/MirrorReflection/mReflection.py	/^class Solution:$/;"	c
Solution	Solutions/NumNodesInSubtree/numNodesInSubtree.py	/^class Solution:$/;"	c
Solution	Solutions/NumberOf1Bits/numberOf1Bits.py	/^class Solution:$/;"	c
Solution	Solutions/PalindromeNumber/palNumber.py	/^class Solution:$/;"	c
Solution	Solutions/PermutationsII/permutationsII.py	/^class Solution:$/;"	c
Solution	Solutions/PlusOne/plusOne.py	/^class Solution:$/;"	c
Solution	Solutions/PoorPigs/poorPigs.py	/^class Solution:$/;"	c
Solution	Solutions/PopulateNextRightPointer/popRight.py	/^class Solution:$/;"	c
Solution	Solutions/RangeSumBST/rangeSum.py	/^class Solution:$/;"	c
Solution	Solutions/RemoveDuplicatesSortedArray/removeDuplicates.py	/^class Solution:$/;"	c
Solution	Solutions/RemoveElement/removeElement.py	/^class Solution:$/;"	c
Solution	Solutions/ReverseBits/reverseBits.py	/^class Solution:$/;"	c
Solution	Solutions/ReverseNodesKGroup/reverseKGroup.py	/^class Solution:$/;"	c
Solution	Solutions/SameTree/sameTree.py	/^class Solution:$/;"	c
Solution	Solutions/SearchRotatedSortedArrayII/searchRotateII.py	/^class Solution:$/;"	c
Solution	Solutions/SingleNumber/singleNumber.py	/^class Solution:$/;"	c
Solution	Solutions/SmallestDivisorThreshold/smallestDivisor.py	/^class Solution:$/;"	c
Solution	Solutions/SortedArrayToBST/arrayToBST.py	/^class Solution:$/;"	c
Solution	Solutions/SurroundedRegions/surroundedRegions.py	/^class Solution:$/;"	c
Solution	Solutions/SymmetricTree/symmetricTree.py	/^class Solution:$/;"	c
Solution	Solutions/ValidBST/validBST.py	/^class Solution:$/;"	c
Solution	Solutions/ValidParentheses/validParentheses.py	/^class Solution:$/;"	c
Solution	Solutions/ValidSquare/validSquare.py	/^class Solution:$/;"	c
Solution	Solutions/ZigZagOrderTraversal/zigzag.py	/^class Solution:$/;"	c
Solution	Solutions/btLevelOrder/btLevelOrder.py	/^class Solution:$/;"	c
Solution	Solutions/searchInsert/searchInsert.py	/^class Solution:$/;"	c
Solution	Solutions/strStr/strStr.py	/^class Solution:$/;"	c
TestFreq	Solutions/FrequencyQueries/test.py	/^class TestFreq(unittest.TestCase):$/;"	c
TreeAncestor	Solutions/KthAncestor/kthAncestor.py	/^class TreeAncestor:$/;"	c
TreeNode	Solutions/BTreeMaxPathSum/bTreeMaxPathSum.py	/^class TreeNode:$/;"	c
TreeNode	Solutions/BTreeTilt/BTreeTilt.py	/^class TreeNode:$/;"	c
TreeNode	Solutions/BTreeTilt/BTreeTilt2.py	/^class TreeNode:$/;"	c
TreeNode	Solutions/MaxDiffAncestor/maxDiffAncestor.py	/^class TreeNode:$/;"	c
TreeNode	Solutions/RangeSumBST/rangeSum.py	/^class TreeNode:$/;"	c
TreeNode	Solutions/SameTree/sameTree.py	/^class TreeNode:$/;"	c
TreeNode	Solutions/ValidBST/validBST.py	/^class TreeNode:$/;"	c
TreeNode	Solutions/ZigZagOrderTraversal/zigzag.py	/^class TreeNode:$/;"	c
TreeNode	Solutions/btLevelOrder/btLevelOrder.py	/^class TreeNode:$/;"	c
TreeNode	Utilities/listToTree.py	/^class TreeNode:$/;"	c
__eq__	Solutions/InsertionSortList/insertionSort.py	/^    def __eq__(self, n):$/;"	m	class:ListNode	file:
__init__	MockInterview/LC2/FIFO/FIFO.py	/^    def __init__(self):$/;"	m	class:MyQueue
__init__	MockInterview/LC2/FIFO/FIFO.py	/^    def __init__(self):$/;"	m	class:MyQueueAmortized
__init__	MockInterview/LC2/FIFO/FIFO.py	/^    def __init__(self, val):$/;"	m	class:Node
__init__	Solutions/AddTwoNumbersAlt/addTwo.py	/^    def __init__(self, val=0, next=None):$/;"	m	class:ListNode
__init__	Solutions/ArrayManipulation/arrayManip.py	/^    def __init__(self, r, val):$/;"	m	class:Node
__init__	Solutions/BTreeMaxPathSum/bTreeMaxPathSum.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Solutions/BTreeTilt/BTreeTilt.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Solutions/BTreeTilt/BTreeTilt2.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Solutions/BinaryLListToInt/binToInt.py	/^    def __init__(self, val=0, next=None):$/;"	m	class:ListNode
__init__	Solutions/DesignBrowserHistory/browserHistory.py	/^    def __init__(self, homepage):$/;"	m	class:BrowserHistory
__init__	Solutions/FrequencyQueries/freqQueries.py	/^    def __init__(self):$/;"	m	class:freq
__init__	Solutions/InsertionSortList/insertionSort.py	/^    def __init__(self, val=0, next=None):$/;"	m	class:ListNode
__init__	Solutions/KthAncestor/kthAncestor.py	/^    def __init__(self, n, parent):$/;"	m	class:TreeAncestor
__init__	Solutions/LRUCache/lrucache.py	/^    def __init__(self):$/;"	m	class:dLinkedList
__init__	Solutions/LRUCache/lrucache.py	/^    def __init__(self, capacity):$/;"	m	class:LRUCache
__init__	Solutions/LRUCache/lrucache.py	/^    def __init__(self, val = None):$/;"	m	class:dllNode
__init__	Solutions/MaxDiffAncestor/maxDiffAncestor.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Solutions/NumNodesInSubtree/numNodesInSubtree.py	/^    def __init__(self, label):$/;"	m	class:Node
__init__	Solutions/PopulateNextRightPointer/popRight.py	/^    def __init__(self, val=0, left = None, right = None, next = None):$/;"	m	class:Node
__init__	Solutions/RangeSumBST/rangeSum.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Solutions/ReverseNodesKGroup/reverseKGroup.py	/^    def __init__(self, val=0, next=None):$/;"	m	class:ListNode
__init__	Solutions/SameTree/sameTree.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Solutions/SortingComparator/sortingComparator.py	/^    def __init__(self, name, score):$/;"	m	class:Player
__init__	Solutions/ValidBST/validBST.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Solutions/ZigZagOrderTraversal/zigzag.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Solutions/btLevelOrder/btLevelOrder.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	Utilities/listToTree.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__repr__	Solutions/SortingComparator/sortingComparator.py	/^    def __repr__(self):$/;"	m	class:Player	file:
_hash	Solutions/HashTableImplementation/hash.c	/^struct _hash {$/;"	s	file:
_node	Solutions/HashTableImplementation/hash.c	/^struct _node {$/;"	s	file:
a	MockInterview/LC1/longestPalindrome/test.py	/^   a = Solution()$/;"	v	class:testLongestPal
a	MockInterview/LC2/DayOfWeek/test.py	/^   a = Solution()$/;"	v	class:testDOW
a	Solutions/AToI/test.py	/^    a = Solution()$/;"	v	class:testATOI
a	Solutions/AddBinary/addBinary.py	/^a = Solution()$/;"	v
a	Solutions/BTreeTilt/test.py	/^   a = Solution()$/;"	v	class:testTilt
a	Solutions/BinaryLListToInt/test.py	/^   a = Solution()$/;"	v	class:test
a	Solutions/BuySellStockI/test.py	/^    a = Solution()$/;"	v	class:test
a	Solutions/ConsecutiveCharacters/test.py	/^   a = Solution()$/;"	v	class:test
a	Solutions/CourseSchedule/test.py	/^    a = Solution()$/;"	v	class:testCourseSchedule
a	Solutions/DecodeString/test.py	/^    a = Solution()$/;"	v	class:testDecode
a	Solutions/FirstLastPositionOfElement/test.py	/^    a = Solution()$/;"	v	class:testFLElement
a	Solutions/FlippingImage/test.py	/^   a = Solution()$/;"	v	class:testFlipImage
a	Solutions/InsertionSortList/test.py	/^   a = Solution()$/;"	v	class:testISort
a	Solutions/LongestMountainInArray/test.py	/^    a = Solution()$/;"	v	class:test
a	Solutions/MaxDiffAncestor/test.py	/^   a = Solution()$/;"	v	class:testMaxDiff
a	Solutions/MergeIntervals/test.py	/^    a = Solution()$/;"	v	class:test
a	Solutions/MinHeightTrees/test.py	/^   a = Solution()$/;"	v	class:testMinHeightT
a	Solutions/MirrorReflection/test.py	/^    a = Solution()$/;"	v	class:test
a	Solutions/NumNodesInSubtree/numNodesInSubtree.py	/^a = Solution()$/;"	v
a	Solutions/NumNodesInSubtree/test.py	/^   a = Solution()$/;"	v	class:testNumNodes
a	Solutions/NumberOf1Bits/test.py	/^    a = Solution()$/;"	v	class:test1Bits
a	Solutions/PermutationsII/test.py	/^    a = Solution()$/;"	v	class:test
a	Solutions/PoorPigs/test.py	/^    a = Solution()$/;"	v	class:testPigs
a	Solutions/PopulateNextRightPointer/test.py	/^    a = Solution()$/;"	v	class:testPopRight
a	Solutions/RangeSumBST/test.py	/^    a = Solution()$/;"	v	class:testRangeSum
a	Solutions/RemoveDuplicatesSortedArray/test.py	/^    a = Solution()$/;"	v	class:testRemoveDuplicates
a	Solutions/ReverseBits/reverseBits.py	/^a = Solution()$/;"	v
a	Solutions/ReverseNodesKGroup/reverseKGroup.py	/^a = Solution()$/;"	v
a	Solutions/SearchRotatedSortedArrayII/searchRotateII.py	/^a = Solution()$/;"	v
a	Solutions/SearchRotatedSortedArrayII/test.py	/^    a = Solution()$/;"	v	class:test
a	Solutions/SurroundedRegions/test.py	/^    a = Solution()$/;"	v	class:testSRegions
a	Solutions/ValidBST/test.py	/^    a = Solution()$/;"	v	class:testValidBST
a	Solutions/ValidParentheses/test.py	/^    a = Solution()$/;"	v	class:testIsValid
a	Solutions/ValidSquare/test.py	/^    a = Solution()$/;"	v	class:test
a	Solutions/ZigZagOrderTraversal/zigzag.py	/^a = Solution()$/;"	v
a2NTests	Solutions/AddTwoNumbers/test.py	/^class a2NTests(unittest.TestCase):$/;"	c
activityNotifications	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^def activityNotifications(expenditure, d):$/;"	f
addBinary	Solutions/AddBinary/addBinary.py	/^    def addBinary(self, a, b):$/;"	m	class:Solution
addEdge	NotesForInterview/dfsbfscode/implementation.java	/^   public void addEdge(int source, int destination) {$/;"	m	class:Graph
addSubNode	Solutions/NumNodesInSubtree/numNodesInSubtree.py	/^    def addSubNode(self, n):$/;"	m	class:Node
addTwoNumbers	Solutions/AddTwoNumbers/addTwoNumbers.py	/^def addTwoNumbers(num1, num2):$/;"	f
addTwoNumbers	Solutions/AddTwoNumbersAlt/addTwo.py	/^    def addTwoNumbers(self, l1, l2):$/;"	m	class:Solution
adjacent	NotesForInterview/dfsbfscode/implementation.java	/^      LinkedList<Node> adjacent = new LinkedList<Node>();$/;"	f	class:Graph.Node
altConnect	Solutions/PopulateNextRightPointer/popRight.py	/^    def altConnect(self, root):$/;"	m	class:Solution
ans	Solutions/FrequencyQueries/freqQueries.py	/^    ans = freqQuery(queries)$/;"	v
append	Solutions/LRUCache/lrucache.py	/^    def append(self, node):$/;"	m	class:dLinkedList
arr	Solutions/MergeSortCountInversions/countInversions.py	/^        arr = list(map(int, input().rstrip().split()))$/;"	v
arrayManipulation	Solutions/ArrayManipulation/arrayManip.py	/^def arrayManipulation(n, queries):   $/;"	f
back	Solutions/DesignBrowserHistory/browserHistory.py	/^    def back(self, steps):$/;"	m	class:BrowserHistory
bfs	Solutions/NumberOfIslands/numberOfIslands.py	/^def bfs(grid, visited, startX, startY):$/;"	f
binarySearch	Solutions/BinarySearch/binarySearch.py	/^def binarySearch(items, target):$/;"	f
canFinish	Solutions/CourseSchedule/courseSchedule.py	/^    def canFinish(self, numCourses, prerequisites):$/;"	m	class:Solution
checkMagazine	Solutions/CheckMagazine/checkMagazine.py	/^def checkMagazine(magazine, note):$/;"	f
checkPal	MockInterview/LC1/longestPalindrome/longestPal.py	/^    def checkPal(self, s):$/;"	m	class:Solution
checkSubStr	Solutions/ConsecutiveCharacters/conChar.py	/^    def checkSubStr(self, s, start, end):$/;"	m	class:Solution
checkValid	Solutions/NumberOfIslands/numberOfIslands.py	/^def checkValid(grid, y, x, val):$/;"	f
comparator	Solutions/SortingComparator/sortingComparator.py	/^    def comparator(a, b):$/;"	m	class:Player
connect	Solutions/PopulateNextRightPointer/popRight.py	/^    def connect(self, root):$/;"	m	class:Solution
convert	Solutions/ZigZagConversion/zigzag.py	/^def convert(s, numRows):$/;"	f
countInversions	Solutions/MergeSortCountInversions/countInversions.py	/^def countInversions(arr):$/;"	f
countSubTrees	Solutions/NumNodesInSubtree/numNodesInSubtree.py	/^    def countSubTrees(self, n, edges, labels):$/;"	m	class:Solution
countTriplets	Solutions/CountTriplets/countTriplets.py	/^def countTriplets(arr, r):$/;"	f
d	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^    d = int(nd[1])$/;"	v
dLinkedList	Solutions/LRUCache/lrucache.py	/^class dLinkedList:$/;"	c
dayOfTheWeek	MockInterview/LC2/DayOfWeek/dayOfWeek.py	/^    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:$/;"	m	class:Solution
decodeString	Solutions/DecodeString/decodeString.py	/^    def decodeString(self, s):     $/;"	m	class:Solution
deleteNode	MockInterview/LC3/DeleteNodeNoHead/deleteNode.py	/^    def deleteNode(self, node):$/;"	m	class:Solution
dfs	Solutions/CourseSchedule/courseSchedule.py	/^    def dfs(self, x, numCourses, graph, visited, doneDFS):$/;"	m	class:Solution
dfs	Solutions/NumNodesInSubtree/numNodesInSubtree.py	/^    def dfs(self, curr, graph, retArray, labels, n, visited):$/;"	m	class:Solution
dist	Solutions/ValidSquare/validSquare.py	/^    def dist(self, x, y):$/;"	m	class:Solution
dllNode	Solutions/LRUCache/lrucache.py	/^class dllNode:$/;"	c
empty	MockInterview/LC2/FIFO/FIFO.py	/^    def empty(self) -> bool:$/;"	m	class:MyQueueAmortized
empty	MockInterview/LC2/FIFO/FIFO.py	/^    def empty(self):$/;"	m	class:MyQueue
expenditure	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^    expenditure = list(map(int, input().rstrip().split()))$/;"	v
f	Solutions/ArrayManipulation/arrayManip.py	/^f = open("test")$/;"	v
findEnd	Solutions/FirstLastPositionOfElement/flElement.py	/^    def findEnd(self, nums, output, start, end, target):$/;"	m	class:Solution
findMedianSortedArrays	Solutions/MedianOfTwoSortedArrays/medianTwoSortedArrays.py	/^def findMedianSortedArrays(nums1, nums2):$/;"	f
findMinHeightTrees	Solutions/MinHeightTrees/minHeight.py	/^    def findMinHeightTrees(self, n, edges):$/;"	m	class:Solution
findStart	Solutions/FirstLastPositionOfElement/flElement.py	/^    def findStart(self, nums, output, start, end, target):$/;"	m	class:Solution
findTilt	Solutions/BTreeTilt/BTreeTilt.py	/^    def findTilt(self, root):$/;"	m	class:Solution
findTilt	Solutions/BTreeTilt/BTreeTilt2.py	/^    def findTilt(self, root):$/;"	m	class:Solution
firstUniqChar	Solutions/FirstUniqueChar/firstUniqueChar.py	/^    def firstUniqChar(self, s):$/;"	m	class:Solution
flipAndInvertImage	Solutions/FlippingImage/flipImage.py	/^    def flipAndInvertImage(self, A):$/;"	m	class:Solution
forward	Solutions/DesignBrowserHistory/browserHistory.py	/^    def forward(self, steps):$/;"	m	class:BrowserHistory
fptr	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^    fptr = open("test_out.txt", 'w')$/;"	v
fptr	Solutions/FrequencyQueries/freqQueries.py	/^    fptr = open(os.environ['OUTPUT_PATH'], 'w')$/;"	v
freq	Solutions/FrequencyQueries/freqQueries.py	/^class freq:$/;"	c
freqQuery	Solutions/FrequencyQueries/freqQueries.py	/^def freqQuery(queries):$/;"	f
get	Solutions/HashTableImplementation/hash.c	/^int get(char*key, Hash h) {$/;"	f
get	Solutions/LRUCache/lrucache.py	/^    def get(self, key):$/;"	m	class:LRUCache
getDecimalValue	Solutions/BinaryLListToInt/binToInt.py	/^    def getDecimalValue(self, head):$/;"	m	class:Solution
getKthAncestor	Solutions/KthAncestor/kthAncestor.py	/^    def getKthAncestor(self, node, k):$/;"	m	class:TreeAncestor
getNode	NotesForInterview/dfsbfscode/implementation.java	/^   private Node getNode(int id) {$/;"	m	class:Graph	file:
hammingWeight	MockInterview/LC3/NumberOf1Bits/numberOf1Bits.py	/^    def hammingWeight(self, n: int) -> int:$/;"	m	class:Solution
hammingWeight	Solutions/NumberOf1Bits/numberOf1Bits.py	/^    def hammingWeight(self, n):$/;"	m	class:Solution
hasCycle	Solutions/CycleInLlist/listCycle.py	/^    def hasCycle(self, head):$/;"	m	class:Solution
hasPathBFS	NotesForInterview/dfsbfscode/implementation.java	/^   public boolean hasPathBFS(Node source, Node destination) {$/;"	m	class:Graph
hasPathDFS	NotesForInterview/dfsbfscode/implementation.java	/^   public boolean hasPathDFS(Node source, Node destination, HashSet<Integer> visited) {$/;"	m	class:Graph
hasPathDFS	NotesForInterview/dfsbfscode/implementation.java	/^   public boolean hasPathDFS(int source, int destination) {$/;"	m	class:Graph
hashFunc	Solutions/HashTableImplementation/hash.c	/^static int hashFunc(char*key) {$/;"	f	file:
id	NotesForInterview/dfsbfscode/implementation.java	/^      private int id;$/;"	f	class:Graph.Node	file:
initialiseHash	Solutions/HashTableImplementation/hash.c	/^Hash initialiseHash(void) {$/;"	f
inorderTraversal	Solutions/InorderTraversal/inorderTraversal.py	/^    def inorderTraversal(self, root):$/;"	m	class:Solution
insert	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^def insert(v, li, length):$/;"	f
insert	Solutions/FrequencyQueries/freqQueries.py	/^    def insert(self, x):$/;"	m	class:freq
insert	Solutions/MarkAndToys/markToys.py	/^def insert(v, li):$/;"	f
insertionSortList	Solutions/InsertionSortList/insertionSort.py	/^    def insertionSortList(self, head):$/;"	m	class:Solution
intToBinary	Solutions/IntToBinary/intToBinary.py	/^def intToBinary(i):$/;"	f
isBalanced	Solutions/BalancedBTree/balancedBTree.py	/^    def isBalanced(self, root):$/;"	m	class:Solution
isLeapYear	MockInterview/LC2/DayOfWeek/dayOfWeek.py	/^    def isLeapYear(self, year):$/;"	m	class:Solution
isPalindrome	Solutions/LongestPalSubstring/longestPalSubstring.py	/^def isPalindrome(string):$/;"	f
isPalindrome	Solutions/PalindromeNumber/palNumber.py	/^    def isPalindrome(self, x: int) -> bool:$/;"	m	class:Solution
isPresent	Solutions/FrequencyQueries/freqQueries.py	/^    def isPresent(self, z):$/;"	m	class:freq
isSameTree	Solutions/SameTree/sameTree.py	/^    def isSameTree(self, p, q):$/;"	m	class:Solution
isSameTreeR	Solutions/SameTree/sameTree.py	/^    def isSameTreeR(self, p, q):$/;"	m	class:Solution
isSymmetric	Solutions/SymmetricTree/symmetricTree.py	/^    def isSymmetric(self, root):$/;"	m	class:Solution
isValid	Solutions/ValidParentheses/validParentheses.py	/^    def isValid(self, s):$/;"	m	class:Solution
isValidBST	Solutions/ValidBST/validBST.py	/^    def isValidBST(self, root):$/;"	m	class:Solution
key	Solutions/HashTableImplementation/hash.c	/^   char * key;$/;"	m	struct:_node	file:
leetCodeCase	Solutions/AddTwoNumbers/test.py	/^    def leetCodeCase(self):$/;"	m	class:a2NTests
lenList	Solutions/AddTwoNumbersAlt/addTwo.py	/^    def lenList(self, l):$/;"	m	class:Solution
length	Solutions/HashTableImplementation/hash.c	/^   int length;$/;"	m	struct:_hash	file:
lengthOfLongestSubString	Solutions/LongestSubstringWithoutRepeatingChars/longestSubstring.py	/^def lengthOfLongestSubString(s: str) -> int:$/;"	f
levelOrder	Solutions/btLevelOrder/btLevelOrder.py	/^    def levelOrder(self, root):$/;"	m	class:Solution
line	Solutions/ArrayManipulation/arrayManip.py	/^line = f.readline().strip()$/;"	v
list2Node	Solutions/RangeSumBST/test.py	/^def list2Node(l):$/;"	f
listToTree	Solutions/MaxDiffAncestor/test.py	/^def listToTree(l):$/;"	f
listToTree	Utilities/listToTree.py	/^def listToTree(l):$/;"	f
longestCommonPrefix	Solutions/LongestCommonPrefix/solution.py	/^def longestCommonPrefix(self, strs):$/;"	f
longestMountain	Solutions/LongestMountainInArray/longestMountain.py	/^    def longestMountain(self, A):$/;"	m	class:Solution
longestPalSubstring	Solutions/LongestPalSubstring/longestPalSubstring.py	/^def longestPalSubstring (string):$/;"	f
longestPalindrome	MockInterview/LC1/longestPalindrome/longestPal.py	/^    def longestPalindrome(self, s):$/;"	m	class:Solution
lowestCommonAncestor	Solutions/LCAOfBST/LCA.py	/^    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':$/;"	m	class:Solution
main	Solutions/AToI/atoi.c	/^int main(int argc, char*argv[]) {$/;"	f
main	Solutions/HashTableImplementation/test.c	/^int main(void) {$/;"	f
maxAncestorDiff	Solutions/MaxDiffAncestor/maxDiffAncestor.py	/^    def maxAncestorDiff(self, root):$/;"	m	class:Solution
maxDepth	Solutions/MaxTreeDepth/maxTreeDepth.py	/^    def maxDepth(self, root):$/;"	m	class:Solution
maxPathSum	Solutions/BTreeMaxPathSum/bTreeMaxPathSum.py	/^    def maxPathSum(self, root):$/;"	m	class:Solution
maxPower	Solutions/ConsecutiveCharacters/conChar.py	/^    def maxPower(self, s):$/;"	m	class:Solution
maxProfit	Solutions/BuySellStockI/buySell.py	/^    def maxProfit(self, prices):$/;"	m	class:Solution
maximumToys	Solutions/MarkAndToys/markToys.py	/^def maximumToys(prices, k):$/;"	f
maxlen	Solutions/LongestPalSubstring/longestPalSubstring.py	/^def maxlen(l, i, j):$/;"	f
median	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^def median(li, odd, middle):$/;"	f
merge	Solutions/MergeIntervals/mergeIntervals.py	/^    def merge(self, intervals):$/;"	m	class:Solution
mergeSort	Solutions/MergeSort/mergesort.py	/^def mergeSort(array):$/;"	f
mergeSort	Solutions/MergeSortCountInversions/countInversions.py	/^def mergeSort(arr, l, r):$/;"	f
mergeSort1	Solutions/MergeSort/mergesort.py	/^def mergeSort1(items):$/;"	f
mergeTwoLists	Solutions/MergeTwoLists/mergeTwoLists.py	/^    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:$/;"	m	class:Solution
minCostToMoveChips	Solutions/MinCostToMoveChips/minCost.py	/^    def minCostToMoveChips(self, position):$/;"	m	class:Solution
minimumBribes	Solutions/MinimumBribes/minBribes.py	/^def minimumBribes(q):$/;"	f
minimumSwaps	Solutions/MinimumSwaps/minSwaps.py	/^def minimumSwaps(arr):$/;"	f
mirrorReflection	Solutions/MirrorReflection/mReflection.py	/^    def mirrorReflection(self, p, q):$/;"	m	class:Solution
myAtoi	Solutions/AToI/atoi.c	/^int myAtoi(char * s) {$/;"	f
myAtoi	Solutions/AToI/atoi.py	/^    def myAtoi(self, s):$/;"	m	class:Solution
n	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^    n = int(nd[0])$/;"	v
n	Solutions/MergeSortCountInversions/countInversions.py	/^        n = int(input())$/;"	v
nd	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^    nd = input().split()$/;"	v
next	Solutions/HashTableImplementation/hash.c	/^   Node next;$/;"	m	struct:_node	file:
nodeLookup	NotesForInterview/dfsbfscode/implementation.java	/^   private HashMap<Integer, Node> nodeLookup = new HashMap<Integer, Node>();$/;"	f	class:Graph	file:
numIslands	Solutions/NumberOfIslands/numberOfIslands.py	/^def numIslands(grid):$/;"	f
numSum	Solutions/AToI/atoi.c	/^int numSum(char * s, int count, int negSign) {$/;"	f
peek	MockInterview/LC2/FIFO/FIFO.py	/^    def peek(self) -> int:$/;"	m	class:MyQueueAmortized
peek	MockInterview/LC2/FIFO/FIFO.py	/^    def peek(self):$/;"	m	class:MyQueue
permuteUnique	Solutions/PermutationsII/permutationsII.py	/^    def permuteUnique(self, nums):$/;"	m	class:Solution
plusOne	Solutions/PlusOne/plusOne.py	/^    def plusOne(self, digits: List[int]) -> List[int]:$/;"	m	class:Solution
poorPigs	Solutions/PoorPigs/poorPigs.py	/^    def poorPigs(self, buckets, minutesToDie, minutesToTest):$/;"	m	class:Solution
pop	MockInterview/LC2/FIFO/FIFO.py	/^    def pop(self) -> int:$/;"	m	class:MyQueueAmortized
pop	MockInterview/LC2/FIFO/FIFO.py	/^    def pop(self):$/;"	m	class:MyQueue
pop	Solutions/LRUCache/lrucache.py	/^    def pop(self):$/;"	m	class:dLinkedList
printHash	Solutions/HashTableImplementation/hash.c	/^static void printHash(Hash h) {$/;"	f	file:
printInfo	Solutions/DesignBrowserHistory/browserHistory.py	/^    def printInfo(self):$/;"	m	class:BrowserHistory
printList	Solutions/LRUCache/lrucache.py	/^    def printList(self):$/;"	m	class:dLinkedList
printList	Solutions/MergeTwoLists/mergeTwoLists.py	/^    def printList(self, l):$/;"	m	class:Solution
printList	Solutions/ReverseNodesKGroup/reverseKGroup.py	/^def printList(head):$/;"	f
printListReverse	Solutions/LRUCache/lrucache.py	/^    def printListReverse(self):$/;"	m	class:dLinkedList
printRanges	Solutions/ArrayManipulation/arrayManip.py	/^def printRanges(ranges):$/;"	f
printTree	Utilities/listToTree.py	/^def printTree(root):$/;"	f
printZigZag	Solutions/ZigZagConversion/zigzag.py	/^def printZigZag(s, numRows):$/;"	f
push	MockInterview/LC2/FIFO/FIFO.py	/^    def push(self, x):$/;"	m	class:MyQueue
push	MockInterview/LC2/FIFO/FIFO.py	/^    def push(self, x: int) -> None:$/;"	m	class:MyQueueAmortized
put	Solutions/HashTableImplementation/hash.c	/^int put(char* key, int value, Hash h) {$/;"	f
put	Solutions/LRUCache/lrucache.py	/^    def put(self, key, value):$/;"	m	class:LRUCache
q	Solutions/FrequencyQueries/freqQueries.py	/^    q = int(input().strip())$/;"	v
queries	Solutions/ArrayManipulation/arrayManip.py	/^queries = list()$/;"	v
queries	Solutions/FrequencyQueries/freqQueries.py	/^    queries = []$/;"	v
quickSort	Solutions/QuickSort/quickSort.py	/^def quickSort(items):$/;"	f
rBST	Solutions/SortedArrayToBST/arrayToBST.py	/^    def rBST(self, nums, l, r):$/;"	m	class:Solution
rBal	Solutions/BalancedBTree/balancedBTree.py	/^    def rBal(self, root):$/;"	m	class:Solution
rBinarySearch	Solutions/BinarySearch/binarySearch.py	/^def rBinarySearch(items, target, l, r):$/;"	f
rConnect	Solutions/PopulateNextRightPointer/popRight.py	/^    def rConnect(self, root):$/;"	m	class:Solution
rDFS	Solutions/NumberOfIslands/numberOfIslands.py	/^def rDFS(grid, visited, x, y):$/;"	f
rDecode	Solutions/DecodeString/decodeString.py	/^    def rDecode(self, s, i):$/;"	m	class:Solution
rMaxDiff	Solutions/MaxDiffAncestor/maxDiffAncestor.py	/^    def rMaxDiff(self, root, maxVal, minVal):$/;"	m	class:Solution
rMergeSort	Solutions/MergeSort/mergesort.py	/^def rMergeSort(array, temp, start, end):$/;"	f
rQuickSort	Solutions/QuickSort/quickSort.py	/^def rQuickSort(items, l, r, pivot):$/;"	f
rTilt	Solutions/BTreeTilt/BTreeTilt.py	/^    def rTilt(self, root):$/;"	m	class:Solution
rTilt	Solutions/BTreeTilt/BTreeTilt2.py	/^    def rTilt(self, root):$/;"	m	class:Solution
rValid	Solutions/ValidBST/validBST.py	/^    def rValid(self, root, minimum, maximum):$/;"	m	class:Solution
rangeSumBST	Solutions/RangeSumBST/rangeSum.py	/^    def rangeSumBST(self, root, low, high):$/;"	m	class:Solution
remove	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^def remove(li, order, length):$/;"	f
remove	Solutions/FrequencyQueries/freqQueries.py	/^    def remove(self, y):$/;"	m	class:freq
remove	Solutions/LRUCache/lrucache.py	/^    def remove(self, node):$/;"	m	class:dLinkedList
removeDuplicates	Solutions/RemoveDuplicatesSortedArray/removeDuplicates.py	/^    def removeDuplicates(self, nums):$/;"	m	class:Solution
removeElement	Solutions/RemoveElement/removeElement.py	/^    def removeElement(self, nums, val):$/;"	m	class:Solution
result	Solutions/FraudulentActivityNotifications/fraudActivity.py	/^    result = activityNotifications(expenditure, d)$/;"	v
result	Solutions/MergeSortCountInversions/countInversions.py	/^        result = countInversions(arr)$/;"	v
resultHash	Solutions/LongestPalSubstring/longestPalSubstring.py	/^resultHash = dict()$/;"	v
reverseBits	Solutions/ReverseBits/reverseBits.py	/^    def reverseBits(self, n):$/;"	m	class:Solution
reverseKGroup	Solutions/ReverseNodesKGroup/reverseKGroup.py	/^    def reverseKGroup(self, head, k):$/;"	m	class:Solution
rotLeft	Solutions/ArrLeftRotation/leftRotation.py	/^def rotLeft(a, d):$/;"	f
rpermuteUnique	Solutions/PermutationsII/permutationsII.py	/^    def rpermuteUnique(self, nums):$/;"	m	class:Solution
search	Solutions/SearchRotatedSortedArrayII/searchRotateII.py	/^    def search(self, nums, target):$/;"	m	class:Solution
searchInsert	Solutions/searchInsert/searchInsert.py	/^    def searchInsert(self, nums, target):$/;"	m	class:Solution
searchRange	Solutions/FirstLastPositionOfElement/flElement.py	/^    def searchRange(self, nums, target):$/;"	m	class:Solution
sherlockAndAnagrams	Solutions/SherlockAnagram/sherlock.py	/^def sherlockAndAnagrams(s):$/;"	f
singleNumber	Solutions/SingleNumber/singleNumber.py	/^    def singleNumber(self, nums):$/;"	m	class:Solution
smallestDivisor	Solutions/SmallestDivisorThreshold/smallestDivisor.py	/^    def smallestDivisor(self, nums, threshold):$/;"	m	class:Solution
solve	Solutions/SurroundedRegions/surroundedRegions.py	/^    def solve(self, board):$/;"	m	class:Solution
sortedArrayToBST	Solutions/SortedArrayToBST/arrayToBST.py	/^    def sortedArrayToBST(self, nums):$/;"	m	class:Solution
strStr	Solutions/strStr/strStr.py	/^    def strStr(self, haystack, needle):$/;"	m	class:Solution
t	Solutions/MergeSortCountInversions/countInversions.py	/^    t = int(input())$/;"	v
table	Solutions/HashTableImplementation/hash.c	/^   Node table[20];$/;"	m	struct:_hash	file:
test	Solutions/BinaryLListToInt/test.py	/^class test(unittest.TestCase):$/;"	c
test	Solutions/BuySellStockI/test.py	/^class test(unittest.TestCase):$/;"	c
test	Solutions/ConsecutiveCharacters/test.py	/^class test(unittest.TestCase):$/;"	c
test	Solutions/LongestMountainInArray/test.py	/^class test(unittest.TestCase):$/;"	c
test	Solutions/MergeIntervals/test.py	/^class test(unittest.TestCase):$/;"	c
test	Solutions/MirrorReflection/test.py	/^class test(unittest.TestCase):$/;"	c
test	Solutions/PermutationsII/test.py	/^class test(unittest.TestCase):$/;"	c
test	Solutions/PopulateNextRightPointer/test.py	/^    def test(self):$/;"	m	class:testPopRight
test	Solutions/SearchRotatedSortedArrayII/test.py	/^class test(unittest.TestCase):$/;"	c
test	Solutions/ValidSquare/test.py	/^class test(unittest.TestCase):$/;"	c
test0	Solutions/BinaryLListToInt/test.py	/^   def test0(self):$/;"	m	class:test
test0	Solutions/IntToBinary/test.py	/^    def test0(self):$/;"	m	class:testItoB
test0	Solutions/NumberOf1Bits/test.py	/^    def test0(self):$/;"	m	class:test1Bits
test0Elements	Solutions/LongestPalSubstring/test.py	/^    def test0Elements(self):$/;"	m	class:testSubstring
test1	Solutions/BinaryLListToInt/test.py	/^   def test1(self):$/;"	m	class:test
test1	Solutions/ConsecutiveCharacters/test.py	/^   def test1(self):$/;"	m	class:test
test1	Solutions/DecodeString/test.py	/^    def test1(self):$/;"	m	class:testDecode
test1	Solutions/IntToBinary/test.py	/^    def test1(self):$/;"	m	class:testItoB
test1	Solutions/MinHeightTrees/test.py	/^   def test1(self):$/;"	m	class:testMinHeightT
test1	Solutions/NumberOf1Bits/test.py	/^    def test1(self):$/;"	m	class:test1Bits
test1	Solutions/PermutationsII/test.py	/^    def test1(self):$/;"	m	class:test
test16	Solutions/BinaryLListToInt/test.py	/^   def test16(self):$/;"	m	class:test
test1Bits	Solutions/NumberOf1Bits/test.py	/^class test1Bits(unittest.TestCase):$/;"	c
test1Bucket	Solutions/PoorPigs/test.py	/^    def test1Bucket(self):$/;"	m	class:testPigs
test1Element	Solutions/LongestPalSubstring/test.py	/^    def test1Element(self):$/;"	m	class:testSubstring
test1PigNeeded	Solutions/PoorPigs/test.py	/^    def test1PigNeeded(self):$/;"	m	class:testPigs
test1Row	Solutions/ZigZagConversion/test.py	/^    def test1Row(self):$/;"	m	class:testZigZag
test1x1	Solutions/FlippingImage/test.py	/^   def test1x1(self):$/;"	m	class:testFlipImage
test1x1Board	Solutions/SurroundedRegions/test.py	/^    def test1x1Board(self):$/;"	m	class:testSRegions
test1x1oneIsland	Solutions/NumberOfIslands/test.py	/^    def test1x1oneIsland(self):$/;"	m	class:testNumIslands
test1x1zeroIsland	Solutions/NumberOfIslands/test.py	/^    def test1x1zeroIsland(self):$/;"	m	class:testNumIslands
test2	Solutions/MinHeightTrees/test.py	/^   def test2(self):$/;"	m	class:testMinHeightT
test23	Solutions/BinaryLListToInt/test.py	/^   def test23(self):$/;"	m	class:test
test2Row	Solutions/ZigZagConversion/test.py	/^    def test2Row(self):$/;"	m	class:testZigZag
test2Same	Solutions/ConsecutiveCharacters/test.py	/^   def test2Same(self):$/;"	m	class:test
test2x2	Solutions/FlippingImage/test.py	/^   def test2x2(self):$/;"	m	class:testFlipImage
test2x2Board	Solutions/SurroundedRegions/test.py	/^    def test2x2Board(self):$/;"	m	class:testSRegions
test3	Solutions/MinHeightTrees/test.py	/^   def test3(self):$/;"	m	class:testMinHeightT
test30Nodes	Solutions/BinaryLListToInt/test.py	/^   def test30Nodes(self):$/;"	m	class:test
test3x3Board	Solutions/SurroundedRegions/test.py	/^    def test3x3Board(self):$/;"	m	class:testSRegions
test4	Solutions/MinHeightTrees/test.py	/^   def test4(self):$/;"	m	class:testMinHeightT
test4	Solutions/NumNodesInSubtree/test.py	/^   def test4(self):$/;"	m	class:testNumNodes
test432	Solutions/NumberOf1Bits/test.py	/^    def test432(self):$/;"	m	class:test1Bits
test4QuarterSquare	Solutions/ValidSquare/test.py	/^    def test4QuarterSquare(self):$/;"	m	class:test
test4x5oneIsland	Solutions/NumberOfIslands/test.py	/^    def test4x5oneIsland(self):$/;"	m	class:testNumIslands
test4x5zeroIsland	Solutions/NumberOfIslands/test.py	/^    def test4x5zeroIsland(self):$/;"	m	class:testNumIslands
test58	Solutions/NumberOf1Bits/test.py	/^    def test58(self):$/;"	m	class:test1Bits
test5x5XIsland	Solutions/NumberOfIslands/test.py	/^    def test5x5XIsland(self):$/;"	m	class:testNumIslands
test65893	Solutions/NumberOf1Bits/test.py	/^    def test65893(self):$/;"	m	class:test1Bits
test6589343	Solutions/NumberOf1Bits/test.py	/^    def test6589343(self):$/;"	m	class:test1Bits
test7	Solutions/NumNodesInSubtree/test.py	/^   def test7(self):$/;"	m	class:testNumNodes
test8	Solutions/NumberOf1Bits/test.py	/^    def test8(self):$/;"	m	class:test1Bits
test8Case	Solutions/PoorPigs/test.py	/^    def test8Case(self):$/;"	m	class:testPigs
testATOI	Solutions/AToI/test.py	/^class testATOI(unittest.TestCase):$/;"	c
testAllDifferent	Solutions/PermutationsII/test.py	/^    def testAllDifferent(self):$/;"	m	class:test
testAllEqual	Solutions/MaxDiffAncestor/test.py	/^   def testAllEqual(self):$/;"	m	class:testMaxDiff
testAllEqual	Solutions/PermutationsII/test.py	/^    def testAllEqual(self):$/;"	m	class:test
testAllInOneColumn	Solutions/ZigZagConversion/test.py	/^    def testAllInOneColumn(self):$/;"	m	class:testZigZag
testAllInRange	Solutions/RangeSumBST/test.py	/^    def testAllInRange(self):$/;"	m	class:testRangeSum
testAllNeg	Solutions/FirstLastPositionOfElement/test.py	/^    def testAllNeg(self):$/;"	m	class:testFLElement
testAllNeg	Solutions/MergeSort/test.py	/^    def testAllNeg(self): $/;"	m	class:testSort
testAllNeg	Solutions/QuickSort/test.py	/^    def testAllNeg(self): $/;"	m	class:testSort
testAllSame	Solutions/LongestSubstringWithoutRepeatingChars/test.py	/^    def testAllSame(self):$/;"	m	class:testCases
testAllSameButOne	Solutions/LongestSubstringWithoutRepeatingChars/test.py	/^    def testAllSameButOne(self):$/;"	m	class:testCases
testAllTarget	Solutions/FirstLastPositionOfElement/test.py	/^    def testAllTarget(self):$/;"	m	class:testFLElement
testAllUnique	Solutions/LongestSubstringWithoutRepeatingChars/test.py	/^    def testAllUnique(self):$/;"	m	class:testCases
testAllWhiteSpace	Solutions/AToI/test.py	/^    def testAllWhiteSpace(self):$/;"	m	class:testATOI
testAlmostFlatEarthCase	Solutions/LongestMountainInArray/test.py	/^    def testAlmostFlatEarthCase(self):$/;"	m	class:test
testAscending	Solutions/InsertionSortList/test.py	/^   def testAscending(self):$/;"	m	class:testISort
testBHistory	Solutions/DesignBrowserHistory/test.py	/^class testBHistory(unittest.TestCase):$/;"	c
testBalancedButWrongBrackets	Solutions/ValidParentheses/test.py	/^    def testBalancedButWrongBrackets(self):$/;"	m	class:testIsValid
testBinarySearch	Solutions/BinarySearch/test.py	/^class testBinarySearch(unittest.TestCase):$/;"	c
testBothOdd	Solutions/MedianOfTwoSortedArrays/test.py	/^    def testBothOdd(self):$/;"	m	class:testCases
testCache	Solutions/LRUCache/test.py	/^class testCache(unittest.TestCase):$/;"	c
testCapacity1	Solutions/LRUCache/test.py	/^    def testCapacity1(self):$/;"	m	class:testCache
testCapacity2	Solutions/LRUCache/test.py	/^    def testCapacity2(self):$/;"	m	class:testCache
testCascadeMountains	Solutions/LongestMountainInArray/test.py	/^    def testCascadeMountains(self):$/;"	m	class:test
testCaseEvenLength	Solutions/MergeSort/test.py	/^    def testCaseEvenLength(self):$/;"	m	class:testSort
testCaseEvenLength	Solutions/QuickSort/test.py	/^    def testCaseEvenLength(self):$/;"	m	class:testSort
testCaseOddLength	Solutions/MergeSort/test.py	/^    def testCaseOddLength(self):$/;"	m	class:testSort
testCaseOddLength	Solutions/QuickSort/test.py	/^    def testCaseOddLength(self):$/;"	m	class:testSort
testCases	Solutions/LongestSubstringWithoutRepeatingChars/test.py	/^class testCases(unittest.TestCase):$/;"	c
testCases	Solutions/MedianOfTwoSortedArrays/test.py	/^class testCases(unittest.TestCase):$/;"	c
testCourseSchedule	Solutions/CourseSchedule/test.py	/^class testCourseSchedule(unittest.TestCase):$/;"	c
testCustom	Solutions/RemoveDuplicatesSortedArray/test.py	/^    def testCustom(self):$/;"	m	class:testRemoveDuplicates
testDOW	MockInterview/LC2/DayOfWeek/test.py	/^class testDOW(unittest.TestCase):$/;"	c
testDecode	Solutions/DecodeString/test.py	/^class testDecode(unittest.TestCase):$/;"	c
testDefaul1	Solutions/FlippingImage/test.py	/^   def testDefaul1(self):$/;"	m	class:testFlipImage
testDefault	Solutions/BTreeTilt/test.py	/^   def testDefault(self):$/;"	m	class:testTilt
testDefault	Solutions/BuySellStockI/test.py	/^    def testDefault(self):$/;"	m	class:test
testDefault	Solutions/DesignBrowserHistory/test.py	/^    def testDefault(self):$/;"	m	class:testBHistory
testDefault	Solutions/ValidSquare/test.py	/^    def testDefault(self):$/;"	m	class:test
testDefault1	MockInterview/LC1/longestPalindrome/test.py	/^   def testDefault1(self):$/;"	m	class:testLongestPal
testDefault1	Solutions/MaxDiffAncestor/test.py	/^   def testDefault1(self):$/;"	m	class:testMaxDiff
testDefault1	Solutions/RemoveDuplicatesSortedArray/test.py	/^    def testDefault1(self):$/;"	m	class:testRemoveDuplicates
testDefault1	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testDefault1(self):$/;"	m	class:test
testDefault2	MockInterview/LC1/longestPalindrome/test.py	/^   def testDefault2(self):$/;"	m	class:testLongestPal
testDefault2	Solutions/FlippingImage/test.py	/^   def testDefault2(self):$/;"	m	class:testFlipImage
testDefault2	Solutions/RemoveDuplicatesSortedArray/test.py	/^    def testDefault2(self):$/;"	m	class:testRemoveDuplicates
testDefault2	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testDefault2(self):$/;"	m	class:test
testDefault3	MockInterview/LC1/longestPalindrome/test.py	/^   def testDefault3(self):$/;"	m	class:testLongestPal
testDefaultDiffOrder	Solutions/ValidSquare/test.py	/^    def testDefaultDiffOrder(self):$/;"	m	class:test
testDescOnly	Solutions/BuySellStockI/test.py	/^    def testDescOnly(self):$/;"	m	class:test
testDescendUntilMountainEnd	Solutions/LongestMountainInArray/test.py	/^    def testDescendUntilMountainEnd(self):$/;"	m	class:test
testDescending	Solutions/InsertionSortList/test.py	/^   def testDescending(self):$/;"	m	class:testISort
testDiagSquare	Solutions/ValidSquare/test.py	/^    def testDiagSquare(self):$/;"	m	class:test
testDifferentSlopeLengths	Solutions/LongestMountainInArray/test.py	/^    def testDifferentSlopeLengths(self):$/;"	m	class:test
testDodgyMin	Solutions/BuySellStockI/test.py	/^    def testDodgyMin(self):$/;"	m	class:test
testDuplicates1	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testDuplicates1(self):$/;"	m	class:test
testDuplicates2	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testDuplicates2(self):$/;"	m	class:test
testEdgeKids	Solutions/RangeSumBST/test.py	/^    def testEdgeKids(self):$/;"	m	class:testRangeSum
testEmpty	Solutions/AToI/test.py	/^    def testEmpty(self):$/;"	m	class:testATOI
testEmpty	Solutions/FirstLastPositionOfElement/test.py	/^    def testEmpty(self):$/;"	m	class:testFLElement
testEmpty	Solutions/InsertionSortList/test.py	/^   def testEmpty(self):$/;"	m	class:testISort
testEmpty	Solutions/LongestSubstringWithoutRepeatingChars/test.py	/^    def testEmpty(self):$/;"	m	class:testCases
testEmpty	Solutions/MergeSort/test.py	/^    def testEmpty(self):$/;"	m	class:testSort
testEmpty	Solutions/QuickSort/test.py	/^    def testEmpty(self):$/;"	m	class:testSort
testEmpty	Solutions/ValidParentheses/test.py	/^    def testEmpty(self):$/;"	m	class:testIsValid
testEmptyBoard	Solutions/SurroundedRegions/test.py	/^    def testEmptyBoard(self):$/;"	m	class:testSRegions
testEmptyList	Solutions/BinarySearch/test.py	/^    def testEmptyList(self):$/;"	m	class:testBinarySearch
testEmptyTree	Solutions/BTreeTilt/test.py	/^   def testEmptyTree(self):$/;"	m	class:testTilt
testEqualPoints	Solutions/ValidSquare/test.py	/^    def testEqualPoints(self):$/;"	m	class:test
testEqualSubstrings	Solutions/ConsecutiveCharacters/test.py	/^   def testEqualSubstrings(self):$/;"	m	class:test
testEvenLength2	Solutions/LongestPalSubstring/test.py	/^    def testEvenLength2(self):$/;"	m	class:testSubstring
testEvenLengthList	Solutions/BinarySearch/test.py	/^    def testEvenLengthList(self):$/;"	m	class:testBinarySearch
testEvenNumberDecentSize	Solutions/ZigZagConversion/test.py	/^    def testEvenNumberDecentSize(self):$/;"	m	class:testZigZag
testEvenPalindrome	Solutions/LongestPalSubstring/test.py	/^    def testEvenPalindrome(self):$/;"	m	class:testSubstring
testFLElement	Solutions/FirstLastPositionOfElement/test.py	/^class testFLElement(unittest.TestCase):$/;"	c
testFail	Solutions/NumberOfIslands/test.py	/^    def testFail(self):$/;"	m	class:testNumIslands
testFirstCharLetter	Solutions/AToI/test.py	/^    def testFirstCharLetter(self):$/;"	m	class:testATOI
testFirstCharLetterWithSign	Solutions/AToI/test.py	/^    def testFirstCharLetterWithSign(self):$/;"	m	class:testATOI
testFirstPassSuccess	Solutions/BinarySearch/test.py	/^    def testFirstPassSuccess(self):$/;"	m	class:testBinarySearch
testFlatEarnings	Solutions/BuySellStockI/test.py	/^    def testFlatEarnings(self):$/;"	m	class:test
testFlatEarthCase	Solutions/LongestMountainInArray/test.py	/^    def testFlatEarthCase(self):$/;"	m	class:test
testFlipImage	Solutions/FlippingImage/test.py	/^class testFlipImage(unittest.TestCase):$/;"	c
testFluctuattionsButNoMountain	Solutions/LongestMountainInArray/test.py	/^    def testFluctuattionsButNoMountain(self):$/;"	m	class:test
testHUGE	Solutions/LongestMountainInArray/test.py	/^    def testHUGE(self):$/;"	m	class:test
testHalfNeg	Solutions/ValidSquare/test.py	/^    def testHalfNeg(self):$/;"	m	class:test
testISort	Solutions/InsertionSortList/test.py	/^class testISort(unittest.TestCase):$/;"	c
testImpossible	Solutions/LongestMountainInArray/test.py	/^    def testImpossible(self):$/;"	m	class:test
testIncorrectHalfNeg	Solutions/ValidSquare/test.py	/^    def testIncorrectHalfNeg(self):$/;"	m	class:test
testInsert1Val	Solutions/FrequencyQueries/test.py	/^    def testInsert1Val(self):$/;"	m	class:TestFreq
testInsertManyOfSame	Solutions/FrequencyQueries/test.py	/^    def testInsertManyOfSame(self):$/;"	m	class:TestFreq
testInvalidLeftNotAdhering	Solutions/ValidBST/test.py	/^    def testInvalidLeftNotAdhering(self):$/;"	m	class:testValidBST
testInvalidRightNotAdhering	Solutions/ValidBST/test.py	/^    def testInvalidRightNotAdhering(self):$/;"	m	class:testValidBST
testInvalidSimpleTree	Solutions/ValidBST/test.py	/^    def testInvalidSimpleTree(self):$/;"	m	class:testValidBST
testIsValid	Solutions/ValidParentheses/test.py	/^class testIsValid(unittest.TestCase):$/;"	c
testIsolatedCourses	Solutions/CourseSchedule/test.py	/^    def testIsolatedCourses(self):$/;"	m	class:testCourseSchedule
testItemNotInListLong	Solutions/BinarySearch/test.py	/^    def testItemNotInListLong(self):$/;"	m	class:testBinarySearch
testItoB	Solutions/IntToBinary/test.py	/^class testItoB(unittest.TestCase):$/;"	c
testJustShortofBaseRow	Solutions/ZigZagConversion/test.py	/^    def testJustShortofBaseRow(self):$/;"	m	class:testZigZag
testLCDefault	Solutions/MirrorReflection/test.py	/^    def testLCDefault(self):$/;"	m	class:test
testLastPassSuccess	Solutions/BinarySearch/test.py	/^    def testLastPassSuccess(self):$/;"	m	class:testBinarySearch
testLeastRecentlyUsed	Solutions/LRUCache/test.py	/^    def testLeastRecentlyUsed(self):$/;"	m	class:testCache
testLen1NoTarget	Solutions/FirstLastPositionOfElement/test.py	/^    def testLen1NoTarget(self):$/;"	m	class:testFLElement
testLen1Target	Solutions/FirstLastPositionOfElement/test.py	/^    def testLen1Target(self):$/;"	m	class:testFLElement
testLength1	Solutions/MergeIntervals/test.py	/^    def testLength1(self):$/;"	m	class:test
testLength1	Solutions/MergeSort/test.py	/^    def testLength1(self):$/;"	m	class:testSort
testLength1	Solutions/QuickSort/test.py	/^    def testLength1(self):$/;"	m	class:testSort
testLength1Fail	Solutions/BinarySearch/test.py	/^    def testLength1Fail(self):$/;"	m	class:testBinarySearch
testLength1Pass	Solutions/BinarySearch/test.py	/^    def testLength1Pass(self):$/;"	m	class:testBinarySearch
testLengthOne1	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testLengthOne1(self):$/;"	m	class:test
testLengthOne2	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testLengthOne2(self):$/;"	m	class:test
testLongestPal	MockInterview/LC1/longestPalindrome/test.py	/^class testLongestPal(unittest.TestCase):$/;"	c
testManyOfOne	Solutions/MergeIntervals/test.py	/^    def testManyOfOne(self):$/;"	m	class:test
testMax32	Solutions/IntToBinary/test.py	/^    def testMax32(self):$/;"	m	class:testItoB
testMaxDiff	Solutions/MaxDiffAncestor/test.py	/^class testMaxDiff(unittest.TestCase):$/;"	c
testMaxPigs	Solutions/PoorPigs/test.py	/^    def testMaxPigs(self):$/;"	m	class:testPigs
testMaxVOnLastCall	Solutions/MaxDiffAncestor/test.py	/^   def testMaxVOnLastCall(self):$/;"	m	class:testMaxDiff
testMedianSizeOneArray	Solutions/MedianOfTwoSortedArrays/test.py	/^    def testMedianSizeOneArray(self):$/;"	m	class:testCases
testMinHeightT	Solutions/MinHeightTrees/test.py	/^class testMinHeightT(unittest.TestCase):$/;"	c
testMix	Solutions/PermutationsII/test.py	/^    def testMix(self):$/;"	m	class:test
testMonthAhead	MockInterview/LC2/DayOfWeek/test.py	/^   def testMonthAhead(self):$/;"	m	class:testDOW
testMonthBehind	MockInterview/LC2/DayOfWeek/test.py	/^   def testMonthBehind(self):$/;"	m	class:testDOW
testMoreDigitRepeat	Solutions/DecodeString/test.py	/^    def testMoreDigitRepeat(self):$/;"	m	class:testDecode
testMoreDigitsThanAnother	Solutions/AddTwoNumbers/test.py	/^    def testMoreDigitsThanAnother(self):$/;"	m	class:a2NTests
testMorePrereqThanCourse	Solutions/CourseSchedule/test.py	/^    def testMorePrereqThanCourse(self):$/;"	m	class:testCourseSchedule
testMultiMountains	Solutions/LongestMountainInArray/test.py	/^    def testMultiMountains(self):$/;"	m	class:test
testNegNumbers1	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testNegNumbers1(self):$/;"	m	class:test
testNegNumbers2	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testNegNumbers2(self):$/;"	m	class:test
testNested	Solutions/DecodeString/test.py	/^    def testNested(self):$/;"	m	class:testDecode
testNoMatching	Solutions/RangeSumBST/test.py	/^    def testNoMatching(self):$/;"	m	class:testRangeSum
testNoOverlaps	Solutions/MergeIntervals/test.py	/^    def testNoOverlaps(self):$/;"	m	class:test
testNoPrereq	Solutions/CourseSchedule/test.py	/^    def testNoPrereq(self):$/;"	m	class:testCourseSchedule
testNoRepeats	Solutions/DecodeString/test.py	/^    def testNoRepeats(self):$/;"	m	class:testDecode
testNoRepeats	Solutions/RemoveDuplicatesSortedArray/test.py	/^    def testNoRepeats(self):$/;"	m	class:testRemoveDuplicates
testNoTarget	Solutions/FirstLastPositionOfElement/test.py	/^    def testNoTarget(self):$/;"	m	class:testFLElement
testNonRotated1	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testNonRotated1(self):$/;"	m	class:test
testNonRotated2	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testNonRotated2(self):$/;"	m	class:test
testNoneRoot	Solutions/ValidBST/test.py	/^    def testNoneRoot(self):$/;"	m	class:testValidBST
testNormalCase	Solutions/ValidParentheses/test.py	/^    def testNormalCase(self):$/;"	m	class:testIsValid
testNormalLongPrereqCourse	Solutions/CourseSchedule/test.py	/^    def testNormalLongPrereqCourse(self):$/;"	m	class:testCourseSchedule
testNormalNumber	Solutions/AToI/test.py	/^    def testNormalNumber(self):$/;"	m	class:testATOI
testNormalNumberWithNegativeSign	Solutions/AToI/test.py	/^    def testNormalNumberWithNegativeSign(self):$/;"	m	class:testATOI
testNormalNumberWithOtherChars	Solutions/AToI/test.py	/^    def testNormalNumberWithOtherChars(self):$/;"	m	class:testATOI
testNormalNumberWithPositiveSign	Solutions/AToI/test.py	/^    def testNormalNumberWithPositiveSign(self):$/;"	m	class:testATOI
testNormalNumberWithWhitespace	Solutions/AToI/test.py	/^    def testNormalNumberWithWhitespace(self):$/;"	m	class:testATOI
testNumIslands	Solutions/NumberOfIslands/test.py	/^class testNumIslands(unittest.TestCase):$/;"	c
testNumNodes	Solutions/NumNodesInSubtree/test.py	/^class testNumNodes(unittest.TestCase):$/;"	c
testOdd	Solutions/IntToBinary/test.py	/^    def testOdd(self):$/;"	m	class:testItoB
testOddBucketOutCase	Solutions/PoorPigs/test.py	/^    def testOddBucketOutCase(self):$/;"	m	class:testPigs
testOddLengthList	Solutions/BinarySearch/test.py	/^    def testOddLengthList(self):$/;"	m	class:testBinarySearch
testOddNumberDecentSize	Solutions/ZigZagConversion/test.py	/^    def testOddNumberDecentSize(self):$/;"	m	class:testZigZag
testOne	Solutions/InsertionSortList/test.py	/^   def testOne(self):$/;"	m	class:testISort
testOne	Solutions/ValidParentheses/test.py	/^    def testOne(self):$/;"	m	class:testIsValid
testOneCourseAtLeastOnePrereq	Solutions/CourseSchedule/test.py	/^    def testOneCourseAtLeastOnePrereq(self):$/;"	m	class:testCourseSchedule
testOneCoursePrereqItself	Solutions/CourseSchedule/test.py	/^    def testOneCoursePrereqItself(self):$/;"	m	class:testCourseSchedule
testOneNode	Solutions/ValidBST/test.py	/^    def testOneNode(self):$/;"	m	class:testValidBST
testOneNodeTree	Solutions/BTreeTilt/test.py	/^   def testOneNodeTree(self):$/;"	m	class:testTilt
testOneNumInRange	Solutions/RangeSumBST/test.py	/^    def testOneNumInRange(self):$/;"	m	class:testRangeSum
testOneOddOneEven	Solutions/MedianOfTwoSortedArrays/test.py	/^    def testOneOddOneEven(self):$/;"	m	class:testCases
testOneOut	Solutions/ValidParentheses/test.py	/^    def testOneOut(self):$/;"	m	class:testIsValid
testOneOutAlternate	Solutions/ValidParentheses/test.py	/^    def testOneOutAlternate(self):$/;"	m	class:testIsValid
testOneOverlapEvenLength	Solutions/MergeIntervals/test.py	/^    def testOneOverlapEvenLength(self):$/;"	m	class:test
testOneRotated1	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testOneRotated1(self):$/;"	m	class:test
testOneRotated2	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testOneRotated2(self):$/;"	m	class:test
testOneZero	Solutions/AddTwoNumbers/test.py	/^    def testOneZero(self):$/;"	m	class:a2NTests
testOnlyAscend	Solutions/LongestMountainInArray/test.py	/^    def testOnlyAscend(self):$/;"	m	class:test
testOnlyDescend	Solutions/LongestMountainInArray/test.py	/^    def testOnlyDescend(self):$/;"	m	class:test
testOutOfBoundsCourse	Solutions/CourseSchedule/test.py	/^    def testOutOfBoundsCourse(self):$/;"	m	class:testCourseSchedule
testP1Case	Solutions/MirrorReflection/test.py	/^    def testP1Case(self):$/;"	m	class:test
testPigs	Solutions/PoorPigs/test.py	/^class testPigs(unittest.TestCase):$/;"	c
testPopRight	Solutions/PopulateNextRightPointer/test.py	/^class testPopRight(unittest.TestCase):$/;"	c
testPrereqOfItself	Solutions/CourseSchedule/test.py	/^    def testPrereqOfItself(self):$/;"	m	class:testCourseSchedule
testRandom	Solutions/IntToBinary/test.py	/^    def testRandom(self):$/;"	m	class:testItoB
testRandomRotated1	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testRandomRotated1(self):$/;"	m	class:test
testRandomRotated2	Solutions/SearchRotatedSortedArrayII/test.py	/^    def testRandomRotated2(self):$/;"	m	class:test
testRangeSum	Solutions/RangeSumBST/test.py	/^class testRangeSum(unittest.TestCase):$/;"	c
testReceptor0Hit	Solutions/MirrorReflection/test.py	/^    def testReceptor0Hit(self):$/;"	m	class:test
testReceptor1Hit	Solutions/MirrorReflection/test.py	/^    def testReceptor1Hit(self):$/;"	m	class:test
testRemoveBasic	Solutions/FrequencyQueries/test.py	/^    def testRemoveBasic(self):$/;"	m	class:TestFreq
testRemoveDuplicates	Solutions/RemoveDuplicatesSortedArray/test.py	/^class testRemoveDuplicates(unittest.TestCase):$/;"	c
testRemoveEqualFreq	Solutions/FrequencyQueries/test.py	/^    def testRemoveEqualFreq(self):$/;"	m	class:TestFreq
testReplaceValue	Solutions/LRUCache/test.py	/^    def testReplaceValue(self):$/;"	m	class:testCache
testSRegions	Solutions/SurroundedRegions/test.py	/^class testSRegions(unittest.TestCase):$/;"	c
testSameChar	Solutions/ConsecutiveCharacters/test.py	/^   def testSameChar(self):$/;"	m	class:test
testSeparateRepeats	Solutions/DecodeString/test.py	/^    def testSeparateRepeats(self):$/;"	m	class:testDecode
testSignificantlyHigherMedian	Solutions/MedianOfTwoSortedArrays/test.py	/^    def testSignificantlyHigherMedian(self):$/;"	m	class:testCases
testSignificantlyHigherMedianEven	Solutions/MedianOfTwoSortedArrays/test.py	/^    def testSignificantlyHigherMedianEven(self):$/;"	m	class:testCases
testSimpleIncorrect	Solutions/ValidSquare/test.py	/^    def testSimpleIncorrect(self):$/;"	m	class:test
testSimpleNeg	Solutions/ValidSquare/test.py	/^    def testSimpleNeg(self):$/;"	m	class:test
testSingleDigitsNoCarry	Solutions/AddTwoNumbers/test.py	/^    def testSingleDigitsNoCarry(self):$/;"	m	class:a2NTests
testSingleDigitsWithCarry	Solutions/AddTwoNumbers/test.py	/^    def testSingleDigitsWithCarry(self):$/;"	m	class:a2NTests
testSingleTarget	Solutions/FirstLastPositionOfElement/test.py	/^    def testSingleTarget(self):$/;"	m	class:testFLElement
testSort	Solutions/MergeSort/test.py	/^class testSort(unittest.TestCase):$/;"	c
testSort	Solutions/QuickSort/test.py	/^class testSort(unittest.TestCase):$/;"	c
testSubstring	Solutions/LongestPalSubstring/test.py	/^class testSubstring (unittest.TestCase):$/;"	c
testTargetAtEnd	Solutions/FirstLastPositionOfElement/test.py	/^    def testTargetAtEnd(self):$/;"	m	class:testFLElement
testTargetAtEndMulti	Solutions/FirstLastPositionOfElement/test.py	/^    def testTargetAtEndMulti(self):$/;"	m	class:testFLElement
testTargetAtStart	Solutions/FirstLastPositionOfElement/test.py	/^    def testTargetAtStart(self):$/;"	m	class:testFLElement
testTargetAtStartMulti	Solutions/FirstLastPositionOfElement/test.py	/^    def testTargetAtStartMulti(self):$/;"	m	class:testFLElement
testTilt	Solutions/BTreeTilt/test.py	/^class testTilt(unittest.TestCase):$/;"	c
testToday	MockInterview/LC2/DayOfWeek/test.py	/^   def testToday(self):$/;"	m	class:testDOW
testTomorrow	MockInterview/LC2/DayOfWeek/test.py	/^   def testTomorrow(self):$/;"	m	class:testDOW
testTwo	Solutions/InsertionSortList/test.py	/^   def testTwo(self):$/;"	m	class:testISort
testTwoPathsDifferentOrigins	Solutions/CourseSchedule/test.py	/^    def testTwoPathsDifferentOrigins(self):$/;"	m	class:testCourseSchedule
testTwoPathsToOneCourse	Solutions/CourseSchedule/test.py	/^    def testTwoPathsToOneCourse(self):$/;"	m	class:testCourseSchedule
testTwoSingleElements	Solutions/MedianOfTwoSortedArrays/test.py	/^    def testTwoSingleElements(self):$/;"	m	class:testCases
testTwoZeroes	Solutions/AddTwoNumbers/test.py	/^    def testTwoZeroes(self):$/;"	m	class:a2NTests
testUnique	Solutions/ConsecutiveCharacters/test.py	/^   def testUnique(self):$/;"	m	class:test
testValidBST	Solutions/ValidBST/test.py	/^class testValidBST(unittest.TestCase):$/;"	c
testValidSimpleTree	Solutions/ValidBST/test.py	/^    def testValidSimpleTree(self):$/;"	m	class:testValidBST
testWeek	MockInterview/LC2/DayOfWeek/test.py	/^   def testWeek(self):$/;"	m	class:testDOW
testWeekMinusOne	MockInterview/LC2/DayOfWeek/test.py	/^   def testWeekMinusOne(self):$/;"	m	class:testDOW
testWholeArrayMountain	Solutions/LongestMountainInArray/test.py	/^    def testWholeArrayMountain(self):$/;"	m	class:test
testWholeStringPalindrome	Solutions/LongestPalSubstring/test.py	/^    def testWholeStringPalindrome(self):$/;"	m	class:testSubstring
testZigZag	Solutions/ZigZagConversion/test.py	/^class testZigZag(unittest.TestCase):$/;"	c
thing	Solutions/ReverseNodesKGroup/reverseKGroup.py	/^thing = a.reverseKGroup(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))), 5)$/;"	v
twoStrings	Solutions/TwoStrings/twoStrings.py	/^def twoStrings(s1, s2):$/;"	f
validSquare	Solutions/ValidSquare/validSquare.py	/^    def validSquare(self, p1, p2, p3, p4):$/;"	m	class:Solution
value	Solutions/HashTableImplementation/hash.c	/^   int value;$/;"	m	struct:_node	file:
visit	Solutions/DesignBrowserHistory/browserHistory.py	/^    def visit(self, url):$/;"	m	class:BrowserHistory
zigzagLevelOrder	Solutions/ZigZagOrderTraversal/zigzag.py	/^    def zigzagLevelOrder(self, root):$/;"	m	class:Solution
