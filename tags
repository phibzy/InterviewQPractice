!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DFS	NumberOfIslands/numberOfIslands.py	/^def DFS(grid, visited, x, y):$/;"	f
Graph	notes/dfsbfscode/implementation.java	/^public class Graph {$/;"	c
Node	notes/dfsbfscode/implementation.java	/^      private Node(int id) {$/;"	m	class:Graph.Node	file:
Node	notes/dfsbfscode/implementation.java	/^   public static class Node {$/;"	c	class:Graph
Solution	CourseSchedule/courseSchedule.py	/^class Solution:$/;"	c
Solution	contests/170520/arrangeWords.py	/^class Solution:$/;"	c
Solution	contests/170520/companySubset.py	/^class Solution:$/;"	c
Solution	contests/170520/studentsHomework.py	/^class Solution:$/;"	c
a	CourseSchedule/test.py	/^    a = Solution()$/;"	v	class:testCourseSchedule
a2NTests	AddTwoNumbers/test.py	/^class a2NTests(unittest.TestCase):$/;"	c
addEdge	notes/dfsbfscode/implementation.java	/^   public void addEdge(int source, int destination) {$/;"	m	class:Graph
addTwoNumbers	AddTwoNumbers/addTwoNumbers.py	/^def addTwoNumbers(num1, num2):$/;"	f
adjacent	notes/dfsbfscode/implementation.java	/^      LinkedList<Node> adjacent = new LinkedList<Node>();$/;"	f	class:Graph.Node
arrangeWords	contests/170520/arrangeWords.py	/^    def arrangeWords(self, text: str) -> str:$/;"	m	class:Solution
bfs	NumberOfIslands/numberOfIslands.py	/^def bfs(grid, visited, startX, startY):$/;"	f
busyStudent	contests/170520/studentsHomework.py	/^    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:$/;"	m	class:Solution
canFinish	CourseSchedule/courseSchedule.py	/^    def canFinish(self, numCourses, prerequisites):$/;"	m	class:Solution
checkValid	NumberOfIslands/numberOfIslands.py	/^def checkValid(grid, y, x, val):$/;"	f
convert	ZigZagConversion/zigzag.py	/^def convert(s, numRows):$/;"	f
dfs	CourseSchedule/courseSchedule.py	/^    def dfs(self, x, numCourses, graph, visited, doneDFS):$/;"	m	class:Solution
findMedianSortedArrays	MedianOfTwoSortedArrays/medianTwoSortedArrays.py	/^def findMedianSortedArrays(nums1, nums2):$/;"	f
getNode	notes/dfsbfscode/implementation.java	/^   private Node getNode(int id) {$/;"	m	class:Graph	file:
hasPathBFS	notes/dfsbfscode/implementation.java	/^   public boolean hasPathBFS(Node source, Node destination) {$/;"	m	class:Graph
hasPathDFS	notes/dfsbfscode/implementation.java	/^   public boolean hasPathDFS(Node source, Node destination, HashSet<Integer> visited) {$/;"	m	class:Graph
hasPathDFS	notes/dfsbfscode/implementation.java	/^   public boolean hasPathDFS(int source, int destination) {$/;"	m	class:Graph
id	notes/dfsbfscode/implementation.java	/^      private int id;$/;"	f	class:Graph.Node	file:
isPalindrome	LongestPalSubstring/longestPalSubstring.py	/^def isPalindrome(string):$/;"	f
leetCodeCase	AddTwoNumbers/test.py	/^    def leetCodeCase(self):$/;"	m	class:a2NTests
lengthOfLongestSubString	LongestSubstringWithoutRepeatingChars/longestSubstring.py	/^def lengthOfLongestSubString(s: str) -> int:$/;"	f
longestPalSubstring	LongestPalSubstring/longestPalSubstring.py	/^def longestPalSubstring (string):$/;"	f
maxlen	LongestPalSubstring/longestPalSubstring.py	/^def maxlen(l, i, j):$/;"	f
nodeLookup	notes/dfsbfscode/implementation.java	/^   private HashMap<Integer, Node> nodeLookup = new HashMap<Integer, Node>();$/;"	f	class:Graph	file:
numIslands	NumberOfIslands/numberOfIslands.py	/^def numIslands(grid):$/;"	f
peopleIndexes	contests/170520/companySubset.py	/^    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:$/;"	m	class:Solution
printZigZag	ZigZagConversion/zigzag.py	/^def printZigZag(s, numRows):$/;"	f
rDFS	NumberOfIslands/numberOfIslands.py	/^def rDFS(grid, visited, x, y):$/;"	f
resultHash	LongestPalSubstring/longestPalSubstring.py	/^resultHash = dict()$/;"	v
test0Elements	LongestPalSubstring/test.py	/^    def test0Elements(self):$/;"	m	class:testSubstring
test1Element	LongestPalSubstring/test.py	/^    def test1Element(self):$/;"	m	class:testSubstring
test1Row	ZigZagConversion/test.py	/^    def test1Row(self):$/;"	m	class:testZigZag
test1x1oneIsland	NumberOfIslands/test.py	/^    def test1x1oneIsland(self):$/;"	m	class:testNumIslands
test1x1zeroIsland	NumberOfIslands/test.py	/^    def test1x1zeroIsland(self):$/;"	m	class:testNumIslands
test2Row	ZigZagConversion/test.py	/^    def test2Row(self):$/;"	m	class:testZigZag
test4x5oneIsland	NumberOfIslands/test.py	/^    def test4x5oneIsland(self):$/;"	m	class:testNumIslands
test4x5zeroIsland	NumberOfIslands/test.py	/^    def test4x5zeroIsland(self):$/;"	m	class:testNumIslands
test5x5XIsland	NumberOfIslands/test.py	/^    def test5x5XIsland(self):$/;"	m	class:testNumIslands
testAllInOneColumn	ZigZagConversion/test.py	/^    def testAllInOneColumn(self):$/;"	m	class:testZigZag
testAllSame	LongestSubstringWithoutRepeatingChars/test.py	/^    def testAllSame(self):$/;"	m	class:testCases
testAllSameButOne	LongestSubstringWithoutRepeatingChars/test.py	/^    def testAllSameButOne(self):$/;"	m	class:testCases
testAllUnique	LongestSubstringWithoutRepeatingChars/test.py	/^    def testAllUnique(self):$/;"	m	class:testCases
testBothOdd	MedianOfTwoSortedArrays/test.py	/^    def testBothOdd(self):$/;"	m	class:testCases
testCases	LongestSubstringWithoutRepeatingChars/test.py	/^class testCases(unittest.TestCase):$/;"	c
testCases	MedianOfTwoSortedArrays/test.py	/^class testCases(unittest.TestCase):$/;"	c
testCourseSchedule	CourseSchedule/test.py	/^class testCourseSchedule(unittest.TestCase):$/;"	c
testEmpty	LongestSubstringWithoutRepeatingChars/test.py	/^    def testEmpty(self):$/;"	m	class:testCases
testEvenLength2	LongestPalSubstring/test.py	/^    def testEvenLength2(self):$/;"	m	class:testSubstring
testEvenNumberDecentSize	ZigZagConversion/test.py	/^    def testEvenNumberDecentSize(self):$/;"	m	class:testZigZag
testEvenPalindrome	LongestPalSubstring/test.py	/^    def testEvenPalindrome(self):$/;"	m	class:testSubstring
testFail	NumberOfIslands/test.py	/^    def testFail(self):$/;"	m	class:testNumIslands
testIsolatedCourses	CourseSchedule/test.py	/^    def testIsolatedCourses(self):$/;"	m	class:testCourseSchedule
testJustShortofBaseRow	ZigZagConversion/test.py	/^    def testJustShortofBaseRow(self):$/;"	m	class:testZigZag
testMedianSizeOneArray	MedianOfTwoSortedArrays/test.py	/^    def testMedianSizeOneArray(self):$/;"	m	class:testCases
testMoreDigitsThanAnother	AddTwoNumbers/test.py	/^    def testMoreDigitsThanAnother(self):$/;"	m	class:a2NTests
testMorePrereqThanCourse	CourseSchedule/test.py	/^    def testMorePrereqThanCourse(self):$/;"	m	class:testCourseSchedule
testNoPrereq	CourseSchedule/test.py	/^    def testNoPrereq(self):$/;"	m	class:testCourseSchedule
testNormalLongPrereqCourse	CourseSchedule/test.py	/^    def testNormalLongPrereqCourse(self):$/;"	m	class:testCourseSchedule
testNumIslands	NumberOfIslands/test.py	/^class testNumIslands(unittest.TestCase):$/;"	c
testOddNumberDecentSize	ZigZagConversion/test.py	/^    def testOddNumberDecentSize(self):$/;"	m	class:testZigZag
testOneCourseAtLeastOnePrereq	CourseSchedule/test.py	/^    def testOneCourseAtLeastOnePrereq(self):$/;"	m	class:testCourseSchedule
testOneCoursePrereqItself	CourseSchedule/test.py	/^    def testOneCoursePrereqItself(self):$/;"	m	class:testCourseSchedule
testOneOddOneEven	MedianOfTwoSortedArrays/test.py	/^    def testOneOddOneEven(self):$/;"	m	class:testCases
testOneZero	AddTwoNumbers/test.py	/^    def testOneZero(self):$/;"	m	class:a2NTests
testOutOfBoundsCourse	CourseSchedule/test.py	/^    def testOutOfBoundsCourse(self):$/;"	m	class:testCourseSchedule
testPrereqOfItself	CourseSchedule/test.py	/^    def testPrereqOfItself(self):$/;"	m	class:testCourseSchedule
testSignificantlyHigherMedian	MedianOfTwoSortedArrays/test.py	/^    def testSignificantlyHigherMedian(self):$/;"	m	class:testCases
testSignificantlyHigherMedianEven	MedianOfTwoSortedArrays/test.py	/^    def testSignificantlyHigherMedianEven(self):$/;"	m	class:testCases
testSingleDigitsNoCarry	AddTwoNumbers/test.py	/^    def testSingleDigitsNoCarry(self):$/;"	m	class:a2NTests
testSingleDigitsWithCarry	AddTwoNumbers/test.py	/^    def testSingleDigitsWithCarry(self):$/;"	m	class:a2NTests
testSubstring	LongestPalSubstring/test.py	/^class testSubstring (unittest.TestCase):$/;"	c
testTwoPathsDifferentOrigins	CourseSchedule/test.py	/^    def testTwoPathsDifferentOrigins(self):$/;"	m	class:testCourseSchedule
testTwoPathsToOneCourse	CourseSchedule/test.py	/^    def testTwoPathsToOneCourse(self):$/;"	m	class:testCourseSchedule
testTwoSingleElements	MedianOfTwoSortedArrays/test.py	/^    def testTwoSingleElements(self):$/;"	m	class:testCases
testTwoZeroes	AddTwoNumbers/test.py	/^    def testTwoZeroes(self):$/;"	m	class:a2NTests
testWholeStringPalindrome	LongestPalSubstring/test.py	/^    def testWholeStringPalindrome(self):$/;"	m	class:testSubstring
testZigZag	ZigZagConversion/test.py	/^class testZigZag(unittest.TestCase):$/;"	c
